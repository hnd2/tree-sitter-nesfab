/*
 * Copyright (c) 2023, Patrick Bene
 * This file is distributed under the Boost Software License, Version 1.0.
 * See LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt
 */

 // Player data:
 struct Ball
     UF x
     UF y
     SF vx
     SF vy

vars /scroll
: +zero_page
    // 'scroll_x' refers to the column serving as the scroll's seam.
    // The units are in 8-pixel tiles. (value of 3 means 24 pixels)
    UU scroll_x = 0

    // These track the PPUADDR we'll be modifying in during NMI:
    UU scroll_tiles_ppuaddr = 0
    UU scroll_attrs_ppuaddr = 0
    UU scroll_coin_ppuaddr = 0

    // The data we'll upload to the PPU during NMI.
    U[30] scroll_tiles
    U[8] scroll_attrs

// Returns the PPUADDR underneath 'x' and 'y'.
// 'x' and 'y' are in pixels.
fn calc_scroll_coin_ppuaddr(UU x, UU y) UU
    x >>= 3
    x &= UU(~1)
    y >>= 3
    y &= UU(~1)
    UU addr
    addr.a = x.a & %11111
    addr.b = $20 + ((x.a & %100000) >> 3)
    addr += y << 5
    return addr

// Returns the upper PPUADDR corresponding to a scroll seam.
fn calc_scroll_tiles_ppuaddr(UU scroll_x) UU
    UU addr
    addr.a = scroll_x.a & %11111
    addr.b = $20 + ((scroll_x.a & %100000) >> 3)
    return addr

// Returns the upper PPUADDR corresponding to a scroll seam's attributes.
fn calc_scroll_attrs_ppuaddr(UU scroll_x) UU
    UU addr
    addr.a = $C0 + ((scroll_x.a >> 2) & %111)
    addr.b = $23 + ((scroll_x.a & %100000) >> 3)
    return addr

fn calc_shifted_camera_x() UU
    return UU(camera_x) >> 3

fn update_scroll()
    CCC/levels ptr = current_level
    UU shifted_camera_x = calc_shifted_camera_x()
    UU edge_x
    U attrs_modulo

    if scroll_x < shifted_camera_x       // If we're scrolling right:
        scroll_x += 1
        edge_x = scroll_x + 32
        attrs_modulo = 0
        ptr += 256
    else if scroll_x > shifted_camera_x  // If we're scrolling left:
        scroll_x -= 1
        edge_x = scroll_x
        attrs_modulo = 3
    else                                 // Not scrolling:
        scroll_tiles_ppuaddr = 0
        scroll_attrs_ppuaddr = 0
        return

    // Determine if we're scrolling the west or east side of our metatiles:
    CC/metatiles n = mt_nw
    CC/metatiles s = mt_sw
    if scroll_x & 1
        n = mt_ne
        s = mt_se

    scroll_tiles_ppuaddr = calc_scroll_tiles_ppuaddr(edge_x)
    ptr += ((scroll_x & UU(~1)) << 3)

    // Calculate destroyed:
    U d = U(edge_x.a >> 4) & %1111
    U mask = destroyed_masks[(edge_x.a << 3) & %01111111]

    // Set 'scroll_tiles':
    for U y = 0; y < 15; y += 1
        if destroyed[d] & mask
            scroll_tiles[(y << 1) + 0] = $00
            scroll_tiles[(y << 1) + 1] = $00
        else
            U tile = ptr[y]
            scroll_tiles[(y << 1) + 0] = n[tile]
            scroll_tiles[(y << 1) + 1] = s[tile]
        d += 16

    // Set 'scroll_attrs':
    if edge_x & %11 == attrs_modulo
        edge_x -= attrs_modulo
        ptr -= (attrs_modulo & %10) << 3

        scroll_attrs_ppuaddr = calc_scroll_attrs_ppuaddr(edge_x)
        for U y = 0; y < 16; y += 2
            U attr = mt_ca[ptr[y + 17]]
            attr <<= 2
            attr |= mt_ca[ptr[y + 1]] & %11
            attr <<= 2
            attr |= mt_ca[ptr[y + 16]] & %11
            attr <<= 2
            attr |= mt_ca[ptr[y + 0]] & %11
            scroll_attrs[y >> 1] = attr
    else
        scroll_attrs_ppuaddr = 0


fn ppu_upload_scroll()
: +inline
    {PPUSTATUS}() // Reset the address latch before 'ppu_set_addr', just to be safe.
    {PPUCTRL}(PPUCTRL_VRAM_32_DOWN) // Used to writing columns of data.
    if scroll_tiles_ppuaddr
        ppu_set_addr(scroll_tiles_ppuaddr)
        for U i = 0; i < len(scroll_tiles); i += 1
            {PPUDATA}(scroll_tiles[i])
    if scroll_attrs_ppuaddr
        // Because we're using PPUCTRL_VRAM_32_DOWN, we'll upload attributes like this:
        UU addr = scroll_attrs_ppuaddr
        for U i = 0; i < 4; i += 1
            ppu_set_addr(addr)
            addr += 8
            {PPUDATA}(scroll_attrs[0 + i])
            {PPUDATA}(scroll_attrs[4 + i])
    if scroll_coin_ppuaddr
        ppu_set_addr(scroll_coin_ppuaddr)
        {PPUDATA}($00)
        {PPUDATA}($00)
        ppu_set_addr(scroll_coin_ppuaddr+1)
        {PPUDATA}($00)
        {PPUDATA}($00)
        scroll_coin_ppuaddr = 0
